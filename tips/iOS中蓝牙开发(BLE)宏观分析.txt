BLE初探
BLE是蓝牙4.0技术，省电，蓝牙方面苹果主推BLE技术，低级的蓝牙技术苹果目前应该是不支持了，非要支持的话硬件需要通过MFI认证。
需要用到的框架是苹果的CoreBluetooth。
@import CoreBluetooth;
即可

首先讲一下宏观的知识：
BLE中蓝牙分为两个模式：1.外设模式 2.中心模式
1.外设模式
一般都是其他蓝牙设备为外设，手机为中心，外设中包含有服务（CBService），服务中包含有特征（CBCharacteristic），就像一个两层的字典。
服务字典=>@{
@"FFF0(服务UUID)":服务(CBService
	服务中的特征字典=>@{
			@"FFF2(特征UUID)":特征(CBCharacteristic)
			@"FFF3(特征UUID)":特征(CBCharacteristic)
			}
	)
@"FFF1(服务UUID)":服务(CBService
	服务中的特征字典=>@{
			@"FFF4(特征UUID)":特征(CBCharacteristic)
			@"FFF5(特征UUID)":特征(CBCharacteristic)
			}
	)
}
这样写不知道是不是好理解一些。
特征里有一个东西叫value，就是他的值，我们可以对这个特征的值进行读、写、开启通知模式等操作，不同的设置操作也不同，有的可能是只读，或者没有通知之类的，这就看外设端怎么去实现了。

2.中心模式
一般手机端都是这个模式，毕竟一般还是以智能机为控制中心的。中心模式能做的操作就是扫描外设、连接外设、读写设置通知操作特征值。

了解了这两种模式，对蓝牙开发应该就有些大致的了解了。下面我再来说一下重要的几个类：
1.CBCentralManager(中心模式管理者) 
2.CBPeripheralManager(外设模式管理者) 
3.CBPeripheral(外设) 
4.CBService(服务)
5.CBCharacteristic(特征)

1.CBCentralManager(中心模式管理者)
中心模式管理者主要功能有，扫描外设、连接外设。
他有一个代理，代理的功能主要有，管理者状态、扫描到外设、连接外设成功、连接外设失败、断开连接外设。重点功能就这些，其他功能可以自行查找，以下其他类也都是主要功能。

2.CBPeripheralManager(外设模式管理者)
外设模式管理者由于目前做过的项目没有需要用手机做外设的情况，所以这方面我并没有做研究，大概应该是可以创建服务、特征设置相应的值吧。

3.CBPeripheral(外设)
外设这个类，主要就是中心连接外设后，用外设这个类进行操作，这里要注意，中心只能扫描连接，具体发送数据读取数据等都是由这个类来完成。
还有一点需要注意的就是外设也有个代理，这个代理千万不要和外设管理者的代理弄混了，刚开始做有可能碰到这个问题。
外设主要功能有扫描服务、扫描服务中的特征、设置特征值、读取特征值、开启/关闭特征通知模式。
外设也有一个代理，主要功能有，扫描到服务、扫描到特征、写特征值回调、读特征值回调(读取和通知读到的特征值都会走这个回调)。
*注意
*外设中有服务数组，这个数组在扫描完服务后才会有值，否则为空。
*同理服务中有特征数组，扫描后才有值。

4.CBService(服务)
服务中主要的就是UUID，这个是服务的唯一表识。
服务中有一个特征数组，其中是这个服务下的各种特征。

5.CBCharacteristic(特征)
特征中就是特征，可以获取特征的value

基本就是这样，这么一来，是不是对蓝牙开发就明白些了，主要还是要实践，有条件的话可以找个硬件来试试，没有硬件的话可以用lightblue模拟硬件外设做一下，实践出真知嘛。创建外设相关的东西我没做过，回头再写。

对了，以手机为中心，其他硬件为外设的套路基本是这样的：
1.创建一个中心管理者（一般写成工具类比较好）。
2.中心管理者扫描外设。
3.中心管理者连接外设，这个外设最好用一个全局变量指向他，方便操作。
4.外设（注意是刚才连接的外设，不是外设管理者）设置一个代理。
5.外设扫描服务。
6.扫描需要的服务的特征。
7.对特征进行操作。
嗯基本就是这样