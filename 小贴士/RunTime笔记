runtime是oc实现动态语言的底层机制，使用的时候只要引入#import <objc/runtime.h>即可。
runtime提供了大量的函数来操作类和对象，一般操作类的方法都以class_开头，操作对象的方法以objc_或object_开头。

1.runtime可以动态创建一个类，注意是类而不是对象，方法如下:
  模版:
  Class 你的类 = objc_allocateClassPair([你的类的父类 class], "你的类名", 0);
  class_addMethod(你的类, @selector(提供外部调用的方法名称，直接写即可，不用写字符串), (IMP)关联内部的c函数, "标识符，随便写");
  objc_registerClassPair(你的类);
  
  例:
  Class aClass = objc_allocateClassPair([NSArray class], "ABC", 0);
  class_addMethod(aClass, @selector(ttt2TTT), (IMP)tttTTT, "ssssssffffff");
  objc_registerClassPair(aClass);
该类所关联的函数要这样写:
  模版:
  void 关联内部的c函数(id 类的实例self, SEL 方法名) {
  }

  例:
  void tttTTT(id self, SEL _cmd) {
    //self是类的实例self，_cmd是调用的方法名
  }
调用方法时这样调用:
  模版:
  id 实例 = [[你的类 alloc] init];
  [实例 performSelector:@selector(外部调用的方法名)];

  例:
  id aObj = [[aClass alloc] init];
  [aObj performSelector:@selector(ttt2TTT)];
  
2.



***操作函数
#类名
//获取类的类名
const char * class_getName ( Class cls );

#父类和元类
// 获取类的父类
Class class_getSuperclass ( Class cls );
 
// 判断给定的Class是否是一个元类
BOOL class_isMetaClass ( Class cls );

// 获取实例大小
size_t class_getInstanceSize ( Class cls );

// 获取类中指定名称实例成员变量的信息
Ivar class_getInstanceVariable ( Class cls, const char *name );
 
// 获取类成员变量的信息
Ivar class_getClassVariable ( Class cls, const char *name );
 
// 添加成员变量
BOOL class_addIvar ( Class cls, const char *name, size_t size, uint8_t alignment, const char *types );
 
// 获取整个成员变量列表
Ivar * class_copyIvarList ( Class cls, unsigned int *outCount );
